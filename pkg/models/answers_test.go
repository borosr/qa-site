// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnswers(t *testing.T) {
	t.Parallel()

	query := Answers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnswersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Answers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnswersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Answers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Answers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnswersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnswerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Answers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnswersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnswerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Answer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnswerExists to return true, but got false.")
	}
}

func testAnswersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	answerFound, err := FindAnswer(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if answerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnswersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Answers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnswersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Answers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnswersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	answerOne := &Answer{}
	answerTwo := &Answer{}
	if err = randomize.Struct(seed, answerOne, answerDBTypes, false, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}
	if err = randomize.Struct(seed, answerTwo, answerDBTypes, false, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = answerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = answerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Answers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnswersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	answerOne := &Answer{}
	answerTwo := &Answer{}
	if err = randomize.Struct(seed, answerOne, answerDBTypes, false, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}
	if err = randomize.Struct(seed, answerTwo, answerDBTypes, false, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = answerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = answerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Answers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func answerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Answer) error {
	*o = Answer{}
	return nil
}

func answerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Answer) error {
	*o = Answer{}
	return nil
}

func answerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Answer) error {
	*o = Answer{}
	return nil
}

func answerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Answer) error {
	*o = Answer{}
	return nil
}

func answerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Answer) error {
	*o = Answer{}
	return nil
}

func answerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Answer) error {
	*o = Answer{}
	return nil
}

func answerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Answer) error {
	*o = Answer{}
	return nil
}

func answerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Answer) error {
	*o = Answer{}
	return nil
}

func answerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Answer) error {
	*o = Answer{}
	return nil
}

func testAnswersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Answer{}
	o := &Answer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, answerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Answer object: %s", err)
	}

	AddAnswerHook(boil.BeforeInsertHook, answerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	answerBeforeInsertHooks = []AnswerHook{}

	AddAnswerHook(boil.AfterInsertHook, answerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	answerAfterInsertHooks = []AnswerHook{}

	AddAnswerHook(boil.AfterSelectHook, answerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	answerAfterSelectHooks = []AnswerHook{}

	AddAnswerHook(boil.BeforeUpdateHook, answerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	answerBeforeUpdateHooks = []AnswerHook{}

	AddAnswerHook(boil.AfterUpdateHook, answerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	answerAfterUpdateHooks = []AnswerHook{}

	AddAnswerHook(boil.BeforeDeleteHook, answerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	answerBeforeDeleteHooks = []AnswerHook{}

	AddAnswerHook(boil.AfterDeleteHook, answerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	answerAfterDeleteHooks = []AnswerHook{}

	AddAnswerHook(boil.BeforeUpsertHook, answerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	answerBeforeUpsertHooks = []AnswerHook{}

	AddAnswerHook(boil.AfterUpsertHook, answerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	answerAfterUpsertHooks = []AnswerHook{}
}

func testAnswersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Answers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnswersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(answerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Answers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnswerToOneUserUsingCreatedByUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Answer
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, answerDBTypes, false, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CreatedBy = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CreatedByUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AnswerSlice{&local}
	if err = local.L.LoadCreatedByUser(ctx, tx, false, (*[]*Answer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedByUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CreatedByUser = nil
	if err = local.L.LoadCreatedByUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedByUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnswerToOneQuestionUsingQuestion(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Answer
	var foreign Question

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, answerDBTypes, false, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, questionDBTypes, false, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.QuestionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Question().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AnswerSlice{&local}
	if err = local.L.LoadQuestion(ctx, tx, false, (*[]*Answer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Question == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Question = nil
	if err = local.L.LoadQuestion(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Question == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnswerToOneSetOpUserUsingCreatedByUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Answer
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, answerDBTypes, false, strmangle.SetComplement(answerPrimaryKeyColumns, answerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetCreatedByUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CreatedByUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatedByAnswers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CreatedBy != x.ID {
			t.Error("foreign key was wrong value", a.CreatedBy)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatedBy))
		reflect.Indirect(reflect.ValueOf(&a.CreatedBy)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CreatedBy != x.ID {
			t.Error("foreign key was wrong value", a.CreatedBy, x.ID)
		}
	}
}
func testAnswerToOneSetOpQuestionUsingQuestion(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Answer
	var b, c Question

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, answerDBTypes, false, strmangle.SetComplement(answerPrimaryKeyColumns, answerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Question{&b, &c} {
		err = a.SetQuestion(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Question != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Answers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.QuestionID != x.ID {
			t.Error("foreign key was wrong value", a.QuestionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.QuestionID))
		reflect.Indirect(reflect.ValueOf(&a.QuestionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.QuestionID != x.ID {
			t.Error("foreign key was wrong value", a.QuestionID, x.ID)
		}
	}
}

func testAnswersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnswersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnswerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnswersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Answers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	answerDBTypes = map[string]string{`ID`: `varchar`, `QuestionID`: `varchar`, `CreatedBy`: `varchar`, `CreatedAt`: `timestamp`, `Answered`: `bool`}
	_             = bytes.MinRead
)

func testAnswersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(answerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(answerAllColumns) == len(answerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Answers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, answerDBTypes, true, answerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnswersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(answerAllColumns) == len(answerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Answer{}
	if err = randomize.Struct(seed, o, answerDBTypes, true, answerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Answers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, answerDBTypes, true, answerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(answerAllColumns, answerPrimaryKeyColumns) {
		fields = answerAllColumns
	} else {
		fields = strmangle.SetComplement(
			answerAllColumns,
			answerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnswerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAnswersUpsert(t *testing.T) {
	t.Parallel()

	if len(answerAllColumns) == len(answerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Answer{}
	if err = randomize.Struct(seed, &o, answerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Answer: %s", err)
	}

	count, err := Answers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, answerDBTypes, false, answerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Answer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Answer: %s", err)
	}

	count, err = Answers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
