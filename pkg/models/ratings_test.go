// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRatings(t *testing.T) {
	t.Parallel()

	query := Ratings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRatingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Ratings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RatingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RatingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Rating exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RatingExists to return true, but got false.")
	}
}

func testRatingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ratingFound, err := FindRating(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ratingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRatingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Ratings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRatingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Ratings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRatingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ratingOne := &Rating{}
	ratingTwo := &Rating{}
	if err = randomize.Struct(seed, ratingOne, ratingDBTypes, false, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}
	if err = randomize.Struct(seed, ratingTwo, ratingDBTypes, false, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ratingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ratingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ratings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRatingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ratingOne := &Rating{}
	ratingTwo := &Rating{}
	if err = randomize.Struct(seed, ratingOne, ratingDBTypes, false, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}
	if err = randomize.Struct(seed, ratingTwo, ratingDBTypes, false, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ratingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ratingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ratingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Rating) error {
	*o = Rating{}
	return nil
}

func ratingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Rating) error {
	*o = Rating{}
	return nil
}

func ratingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Rating) error {
	*o = Rating{}
	return nil
}

func ratingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Rating) error {
	*o = Rating{}
	return nil
}

func ratingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Rating) error {
	*o = Rating{}
	return nil
}

func ratingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Rating) error {
	*o = Rating{}
	return nil
}

func ratingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Rating) error {
	*o = Rating{}
	return nil
}

func ratingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Rating) error {
	*o = Rating{}
	return nil
}

func ratingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Rating) error {
	*o = Rating{}
	return nil
}

func testRatingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Rating{}
	o := &Rating{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ratingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Rating object: %s", err)
	}

	AddRatingHook(boil.BeforeInsertHook, ratingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ratingBeforeInsertHooks = []RatingHook{}

	AddRatingHook(boil.AfterInsertHook, ratingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ratingAfterInsertHooks = []RatingHook{}

	AddRatingHook(boil.AfterSelectHook, ratingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ratingAfterSelectHooks = []RatingHook{}

	AddRatingHook(boil.BeforeUpdateHook, ratingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ratingBeforeUpdateHooks = []RatingHook{}

	AddRatingHook(boil.AfterUpdateHook, ratingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ratingAfterUpdateHooks = []RatingHook{}

	AddRatingHook(boil.BeforeDeleteHook, ratingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ratingBeforeDeleteHooks = []RatingHook{}

	AddRatingHook(boil.AfterDeleteHook, ratingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ratingAfterDeleteHooks = []RatingHook{}

	AddRatingHook(boil.BeforeUpsertHook, ratingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ratingBeforeUpsertHooks = []RatingHook{}

	AddRatingHook(boil.AfterUpsertHook, ratingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ratingAfterUpsertHooks = []RatingHook{}
}

func testRatingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRatingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ratingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Ratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRatingToOneUserUsingRatedByUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Rating
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ratingDBTypes, false, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RatedBy = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RatedByUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RatingSlice{&local}
	if err = local.L.LoadRatedByUser(ctx, tx, false, (*[]*Rating)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RatedByUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RatedByUser = nil
	if err = local.L.LoadRatedByUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RatedByUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRatingToOneSetOpUserUsingRatedByUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Rating
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ratingDBTypes, false, strmangle.SetComplement(ratingPrimaryKeyColumns, ratingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetRatedByUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RatedByUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RatedByRatings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RatedBy != x.ID {
			t.Error("foreign key was wrong value", a.RatedBy)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RatedBy))
		reflect.Indirect(reflect.ValueOf(&a.RatedBy)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RatedBy != x.ID {
			t.Error("foreign key was wrong value", a.RatedBy, x.ID)
		}
	}
}

func testRatingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRatingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RatingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRatingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ratings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ratingDBTypes = map[string]string{`ID`: `varchar`, `Kind`: `varchar`, `RecordID`: `varchar`, `RatedBy`: `varchar`, `RatedAt`: `timestamp`, `Value`: `int2`}
	_             = bytes.MinRead
)

func testRatingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ratingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ratingAllColumns) == len(ratingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRatingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ratingAllColumns) == len(ratingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Rating{}
	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ratingDBTypes, true, ratingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ratingAllColumns, ratingPrimaryKeyColumns) {
		fields = ratingAllColumns
	} else {
		fields = strmangle.SetComplement(
			ratingAllColumns,
			ratingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RatingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRatingsUpsert(t *testing.T) {
	t.Parallel()

	if len(ratingAllColumns) == len(ratingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Rating{}
	if err = randomize.Struct(seed, &o, ratingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Rating: %s", err)
	}

	count, err := Ratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ratingDBTypes, false, ratingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rating struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Rating: %s", err)
	}

	count, err = Ratings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
